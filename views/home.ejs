<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Stablecoin Watch</title>
    <link rel="stylesheet" type="text/css" href="/common.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
        .home-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
        }

        .home-header h1 { margin: 0 0 0.75rem 0; font-size: 2.2rem; }
        .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 1rem; }
        .summary-card { background: rgba(255,255,255,0.12); padding: 1rem; border-radius: 8px; text-align: center; }
        .summary-value { font-size: 1.3rem; font-weight: 700; display: block; }
        .summary-label { opacity: 0.9; font-size: 0.9rem; }

        .content-section { background: #fff; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.08); }
        .section-title { color: #333; border-bottom: 2px solid #667eea; padding-bottom: 0.5rem; margin-bottom: 1rem; }

        .coins-table { width: 100%; border-collapse: collapse; }
        .coins-table th, .coins-table td { padding: 0.75rem; border-bottom: 1px solid #eaeaea; text-align: left; }
        .coins-table th { background: #f8f9fa; color: #333; font-weight: 700; cursor: pointer; position: relative; }
        .coins-table th:hover { background: #e9ecef; }
        .rank { width: 50px; text-align: center; }
        .name-cell { display: flex; align-items: center; gap: 0.5rem; }
        .name-cell img { width: 22px; height: 22px; border-radius: 4px; }
        .symbol { color: #555; }
        .platforms { color: #666; font-size: 0.9rem; }

        .metric-highlight {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 0.2rem 0.5rem;
            border-radius: 12px;
            font-size: 0.85rem;
            font-weight: bold;
        }

        @media (max-width: 860px) {
            .hide-sm { display: none; }
        }

        /* Sorting indicators */
        .sort-asc::after { content: ' ▲'; color: #667eea; }
        .sort-desc::after { content: ' ▼'; color: #667eea; }
    </style>
</head>
<body>
    <div id="wrapper">
        <!-- Header -->
        <%- include('partials/header') %>
        <!-- Header -->

        <main>
            <div class="home-header">
                <h1>Top Stablecoins</h1>
                <div class="summary-grid">
                    <div class="summary-card">
                        <span class="summary-value"><%= data.metrics.totalMCap_s || 'No data' %></span>
                        <span class="summary-label">Total Market Cap</span>
                    </div>
                    <div class="summary-card">
                        <span class="summary-value"><%= data.metrics.totalVolume_s || 'No data' %></span>
                        <span class="summary-label">24h Volume</span>
                    </div>
                    <div class="summary-card">
                        <span class="summary-value"><%= (data.stablecoins && data.stablecoins.length) || 0 %></span>
                        <span class="summary-label">Stablecoins Tracked</span>
                    </div>
                </div>
            </div>

            <% if (data.stablecoins && data.stablecoins.length) { %>
                <div class="content-section">
                    <h2 class="section-title">Stablecoins</h2>
                    <table class="coins-table" id="coinsTable">
                        <thead>
                            <tr>
                                <th class="rank" onclick="sortCoinsTable(0)">#</th>
                                <th onclick="sortCoinsTable(1)">Name</th>
                                <th class="hide-sm" onclick="sortCoinsTable(2)">Symbol</th>
                                <th onclick="sortCoinsTable(3)">Price</th>
                                <th onclick="sortCoinsTable(4)">Pegged Asset</th>
                                <th onclick="sortCoinsTable(5)">Market Cap</th>
                                <th class="hide-sm" onclick="sortCoinsTable(6)">Dominance</th>
                                <th class="hide-sm" onclick="sortCoinsTable(7)">Volume (24h)</th>
                                <th class="hide-sm" onclick="sortCoinsTable(8)">Blockchains</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% let i = 0; %>
                            <% data.stablecoins.forEach((coin) => { %>
                                <% if (!coin.name || !coin.symbol) return; %>
                                <% i++; %>
                                <tr>
                                    <td class="rank"><%= i %></td>
                                    <td>
                                        <div class="name-cell">
                                            <img src="<%= h.getImage(coin) %>" alt="<%= coin.symbol %>" />
                                            <a href="/coins/<%= coin.uri %>"><strong><%= coin.name %></strong></a>
                                        </div>
                                    </td>
                                    <td class="hide-sm symbol"><%= coin.symbol %></td>
                                    <td data-sort="<%= h.safeGet(coin, 'main.price', 0) %>"><%= h.getFormattedPrice(coin, 'main', formatter) %></td>
                                    <td><%= coin.pegged_asset ? coin.pegged_asset : '-' %></td>
                                    <td data-sort="<%= h.safeGet(coin, 'main.circulating_mcap', 0) %>"><%= h.getMarketCap(coin, 'main') %></td>
                                    <td class="hide-sm" data-sort="<%= (h.calculateDominance(h.safeGet(coin, 'main.circulating_mcap', 0), h.safeGet(data.metrics, 'totalMCap', 0)) || 0) %>"><span class="metric-highlight"><%= h.getDominanceDisplay(coin, data.metrics, formatter) %></span></td>
                                    <td class="hide-sm" data-sort="<%= h.safeGet(coin, 'main.volume', 0) %>"><%= h.getVolume(coin, 'main') %></td>
                                    <td class="hide-sm platforms" data-sort="<%= Array.isArray(coin.platforms) ? coin.platforms.length : 0 %>"><%= h.getPlatformDisplay(coin.platforms) %></td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <div class="content-section">
                    <p>No stablecoin data available.</p>
                </div>
            <% } %>
        </main>

        <!-- Footer -->
        <%- include('partials/footer') %>
        <!-- Footer -->
    </div>
    <script>
        // Table sorting for homepage stablecoins
        function sortCoinsTable(columnIndex) {
            const table = document.getElementById('coinsTable');
            if (!table) return;
            const tbody = table.getElementsByTagName('tbody')[0];
        const rows = Array.from(tbody.getElementsByTagName('tr'));

        const headers = table.getElementsByTagName('th');
        const currentHeader = headers[columnIndex];

        // Determine sort direction (toggle)
        let isAscending;
        if (currentHeader.classList.contains('sort-asc')) {
            isAscending = false;
        } else if (currentHeader.classList.contains('sort-desc')) {
            isAscending = true;
        } else {
            const numericCols = new Set([0,3,4,5,6,7]);
            isAscending = !numericCols.has(columnIndex);
        }

        // Sort rows
        rows.sort((a, b) => {
            const aCell = a.getElementsByTagName('td')[columnIndex];
            const bCell = b.getElementsByTagName('td')[columnIndex];

            let aValue = aCell ? aCell.textContent.trim() : '';
            let bValue = bCell ? bCell.textContent.trim() : '';

            // Numeric columns use data-sort where available
            if ([0,3,4,5,6,7].includes(columnIndex)) {
                const aSort = aCell?.getAttribute('data-sort');
                const bSort = bCell?.getAttribute('data-sort');
                const aNum = aSort != null ? parseFloat(aSort) : (parseFloat(aValue.replace(/[^0-9.-]/g, '')) || 0);
                const bNum = bSort != null ? parseFloat(bSort) : (parseFloat(bValue.replace(/[^0-9.-]/g, '')) || 0);
                return isAscending ? aNum - bNum : bNum - aNum;
            }

            // Text columns
            return isAscending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
        });

        // Reset header classes and set current
        for (let header of headers) {
            header.classList.remove('sort-asc', 'sort-desc');
        }
        currentHeader.classList.add(isAscending ? 'sort-asc' : 'sort-desc');

        // Apply new order
        rows.forEach(row => tbody.appendChild(row));
    }
    </script>
</body>
</html>
