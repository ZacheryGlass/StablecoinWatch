<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Stablecoin Watch</title>
    <link rel="stylesheet" type="text/css" href="/common.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script type="application/javascript" src="/chart.min.js"></script>
    <script type="application/javascript" src="/filter-system.js"></script>
    <style>
        .home-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
        }

        .home-header h1 { margin: 0 0 0.75rem 0; font-size: 2.2rem; }
        .summary-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 1rem; }
        .summary-card { background: rgba(255,255,255,0.12); padding: 1rem; border-radius: 8px; text-align: center; }
        .summary-value { font-size: 1.3rem; font-weight: 700; display: block; }
        .summary-label { opacity: 0.9; font-size: 0.9rem; }

        .header-toggle {
            background: rgba(255,255,255,0.2);
            border: none;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            cursor: pointer;
            margin-top: 0.5rem;
            transition: background 0.2s ease;
            display: none;
        }
        .header-toggle:hover { background: rgba(255,255,255,0.3); }
        .header-toggle:focus { outline: 2px solid white; outline-offset: 2px; }
        
        /* Advanced Filter System Styles */
        .advanced-filters {
            background: #f8f9fa;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        }
        
        .filter-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #adb5bd;
            background: #ffffff;
            border-radius: 12px 12px 0 0;
        }
        
        .filter-header h3 {
            margin: 0;
            color: #333;
            font-size: 1.1rem;
            font-weight: 600;
        }
        
        .filter-header-controls {
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }
        
        .filter-toggle-btn, .clear-filters-btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 500;
        }
        
        .filter-toggle-btn {
            background: #667eea;
            color: white;
        }
        
        .filter-toggle-btn:hover {
            background: #5a6fd8;
            transform: translateY(-1px);
        }
        
        .clear-filters-btn {
            background: #dc3545;
            color: white;
        }
        
        .clear-filters-btn:hover {
            background: #c82333;
            transform: translateY(-1px);
        }

        /* Filter count badge */
        .filter-count-badge {
            background: #f56565;
            color: white;
            border-radius: 50%;
            padding: 0.2rem 0.5rem;
            font-size: 0.75rem;
            font-weight: bold;
            margin-left: 0.5rem;
            min-width: 1.5rem;
            text-align: center;
            display: inline-block;
        }

        /* Screen reader only class */
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        
        .filter-panel {
            padding: 1.5rem;
            background: #ffffff;
            border-radius: 0 0 12px 12px;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            max-height: 600px;
            overflow-y: auto;
        }
        
        .filter-section {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }
        
        .filter-section h4 {
            margin: 0 0 0.75rem 0;
            color: #495057;
            font-size: 0.95rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        .checkbox-group {
            gap: 0.75rem;
        }
        
        .filter-checkbox {
            display: flex;
            align-items: center;
            cursor: pointer;
            font-size: 0.9rem;
            color: #495057;
            position: relative;
            padding-left: 2rem;
            user-select: none;
        }
        
        .filter-checkbox input[type="checkbox"] {
            position: absolute;
            left: 0;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }
        
        .checkmark {
            position: absolute;
            left: 0;
            height: 18px;
            width: 18px;
            background-color: #fff;
            border: 2px solid #adb5bd;
            border-radius: 4px;
            transition: all 0.2s ease;
        }
        
        .filter-checkbox:hover .checkmark {
            border-color: #667eea;
        }
        
        .filter-checkbox input:checked ~ .checkmark {
            background-color: #667eea;
            border-color: #667eea;
        }
        
        .checkmark:after {
            content: "";
            position: absolute;
            display: none;
            left: 5px;
            top: 2px;
            width: 4px;
            height: 8px;
            border: solid white;
            border-width: 0 2px 2px 0;
            transform: rotate(45deg);
        }
        
        .filter-checkbox input:checked ~ .checkmark:after {
            display: block;
        }
        
        .range-group {
            gap: 1rem;
        }
        
        .range-inputs {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .range-inputs input[type="number"] {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid #adb5bd;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        
        .range-separator {
            color: #6c757d;
            font-weight: 500;
        }
        
        .range-slider-container {
            position: relative;
            height: 40px;
        }

        /* Visual range track connection */
        .range-slider-container::before {
            content: '';
            position: absolute;
            top: 17px;
            left: 0;
            right: 0;
            height: 6px;
            background: #e9ecef;
            border-radius: 3px;
            z-index: 1;
        }

        .range-slider-container .range-track {
            position: absolute;
            top: 17px;
            height: 6px;
            background: #667eea;
            border-radius: 3px;
            z-index: 2;
            opacity: 0.3;
        }
        
        .range-slider {
            position: absolute;
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: transparent;
            outline: none;
            -webkit-appearance: none;
            z-index: 3;
        }
        
        .range-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: #667eea;
            cursor: pointer;
            border: 2px solid #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .range-slider::-moz-range-thumb {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: #667eea;
            cursor: pointer;
            border: 2px solid #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .platform-multiselect {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #adb5bd;
            border-radius: 4px;
            font-size: 0.9rem;
            min-height: 100px;
        }
        
        .platform-options {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
            margin-top: 0.75rem;
        }
        
        .blockchain-count-filter {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .blockchain-count-filter label {
            font-size: 0.9rem;
            color: #495057;
        }
        
        .count-input {
            width: 80px;
            padding: 0.25rem 0.5rem;
            border: 1px solid #adb5bd;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        
        .search-input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #adb5bd;
            border-radius: 6px;
            font-size: 0.95rem;
            transition: border-color 0.2s ease;
        }
        
        /* Universal focus indicator for accessibility */
        *:focus-visible {
            outline: 2px solid #667eea;
            outline-offset: 2px;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        /* Custom checkbox focus */
        .filter-checkbox input[type="checkbox"]:focus-visible + .checkmark {
            outline: 2px solid #667eea;
            outline-offset: 2px;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        /* Button focus */
        .filter-toggle-btn:focus-visible,
        .clear-filters-btn:focus-visible {
            outline: 2px solid #667eea;
            outline-offset: 2px;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        /* Input focus */
        input[type="text"]:focus-visible,
        input[type="number"]:focus-visible,
        input[type="range"]:focus-visible,
        select:focus-visible {
            outline: 2px solid #667eea;
            outline-offset: 2px;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .active-filters {
            padding: 1rem 1.5rem;
            background: #e8f4fd;
            border-top: 1px solid #adb5bd;
            border-radius: 0 0 12px 12px;
        }
        
        .active-filters-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }
        
        .active-filters-label {
            font-weight: 600;
            color: #495057;
            font-size: 0.9rem;
        }
        
        .results-count {
            font-size: 0.9rem;
            color: #667eea;
            font-weight: 500;
        }
        
        .filter-badges {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .filter-badge {
            display: inline-flex;
            align-items: center;
            background: #667eea;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            gap: 0.5rem;
        }
        
        .filter-badge-remove {
            background: rgba(255,255,255,0.3);
            border: none;
            border-radius: 50%;
            width: 16px;
            height: 16px;
            color: white;
            cursor: pointer;
            font-size: 0.7rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .filter-badge-remove:hover {
            background: rgba(255,255,255,0.5);
        }
        
        /* Mobile responsiveness for filter system */
        @media (max-width: 1024px) {
            .filter-panel {
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                gap: 1rem;
                padding: 1rem;
            }
            
            .filter-section {
                padding: 0.75rem;
            }
        }
        
        @media (max-width: 768px) {
            .filter-header {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }
            
            .filter-header-controls {
                justify-content: space-between;
            }
            
            .filter-panel {
                grid-template-columns: 1fr;
                gap: 0.75rem;
                padding: 0.75rem;
                max-height: 70vh;
            }
            
            .range-inputs {
                flex-direction: column;
                gap: 0.25rem;
            }
            
            .range-inputs input[type="number"] {
                width: 100%;
            }
            
            .range-separator {
                display: none;
            }
            
            .platform-multiselect {
                min-height: 80px;
            }
            
            .active-filters-header {
                flex-direction: column;
                gap: 0.5rem;
                align-items: flex-start;
            }
            
            .filter-badges {
                gap: 0.25rem;
            }
            
            .filter-badge {
                font-size: 0.75rem;
                padding: 0.2rem 0.5rem;
            }
        }
        
        @media (max-width: 640px) {
            .advanced-filters {
                margin: 0 -1rem 1.5rem -1rem;
                border-radius: 0;
                border-left: none;
                border-right: none;
            }
            
            .filter-header {
                padding: 0.75rem 1rem;
                border-radius: 0;
            }
            
            .filter-header h3 {
                font-size: 1rem;
            }
            
            .filter-toggle-btn, .clear-filters-btn {
                padding: 0.4rem 0.8rem;
                font-size: 0.85rem;
            }
            
            .filter-panel {
                padding: 0.5rem;
                max-height: 60vh;
            }
            
            .filter-section {
                padding: 0.5rem;
            }
            
            .filter-section h4 {
                font-size: 0.85rem;
                margin-bottom: 0.5rem;
            }
            
            .filter-checkbox {
                font-size: 0.85rem;
                padding-left: 1.75rem;
            }
            
            .checkmark {
                height: 16px;
                width: 16px;
            }
            
            .search-input {
                padding: 0.5rem;
                font-size: 0.9rem;
            }
            
            .blockchain-count-filter {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.25rem;
            }
            
            .count-input {
                width: 100%;
            }
            
            .active-filters {
                padding: 0.75rem 1rem;
            }
            
            .filter-badge {
                font-size: 0.7rem;
                padding: 0.15rem 0.4rem;
            }
        }
        
        @media (max-width: 480px) {
            .filter-header-controls {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .filter-toggle-btn, .clear-filters-btn {
                width: 100%;
                text-align: center;
            }
            
            .range-slider-container {
                height: 30px;
            }
            
            .range-slider::-webkit-slider-thumb {
                width: 16px;
                height: 16px;
            }
            
            .range-slider::-moz-range-thumb {
                width: 16px;
                height: 16px;
            }
            
            .platform-multiselect {
                min-height: 60px;
                font-size: 0.85rem;
            }
        }

        .header-content.collapsed .summary-grid { display: none; }
        .header-content.collapsed .home-header p { display: none; }

        .content-section { background: #fff; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.08); }
        .section-title { color: #333; border-bottom: 2px solid #667eea; padding-bottom: 0.5rem; margin-bottom: 1rem; }

        .coins-table { width: 100%; border-collapse: collapse; }
        .coins-table th, .coins-table td { padding: 0.75rem; border-bottom: 1px solid #eaeaea; text-align: left; }
        .coins-table th { background: #f8f9fa; color: #333; font-weight: 700; cursor: pointer; position: relative; }
        .coins-table th:hover { background: #d1ecf1; }
        .rank { width: 50px; text-align: center; }
        .name-cell { display: flex; align-items: center; gap: 0.5rem; }
        .name-cell img { width: 22px; height: 22px; border-radius: 4px; }
        .symbol { color: #555; }
        .platforms { color: #666; font-size: 0.9rem; }

        /* Match blockchain page styling */
        .coin-rank {
            background: #667eea;
            color: white;
            padding: 0.2rem 0.5rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
            min-width: 2rem;
            text-align: center;
            display: inline-block;
        }
        .coin-name { font-weight: bold; color: #667eea; text-decoration: none; }
        .coin-name:hover { color: #764ba2; }

        .metric-highlight {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 0.2rem 0.5rem;
            border-radius: 12px;
            font-size: 0.85rem;
            font-weight: bold;
        }

        /* Charts (match platforms page styles) */
        .chart-container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            margin: 2rem 0;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .chart-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1rem; }
        .collapsible {
            background: #667eea;
            color: white;
            font-weight: bold;
            padding: 0.8rem 1.5rem;
            width: auto;
            margin: 0.5rem auto 0.5rem auto;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .collapsible:hover, .collapsible.active { background: #764ba2; transform: translateY(-2px); }
        .chart-content { display: none; padding: 1rem 0; max-width: 1100px; margin: 0 auto; }
        .chart-wrapper { position: relative; height: 320px; max-width: 800px; margin: 0 auto; }
        .legend-item { display: inline-flex; align-items: center; gap: 0.4rem; font-size: 0.9rem; color: #333; }
        .legend-swatch { width: 12px; height: 12px; border-radius: 50%; display: inline-block; border: 2px solid #fff; box-shadow: 0 0 0 1px rgba(0,0,0,0.1); }

        /* Pegged Asset color variants (reuse metric-highlight chip style) */
        .metric-highlight.peg-usd { background: linear-gradient(135deg, #16a34a, #22c55e); }
        .metric-highlight.peg-eur { background: linear-gradient(135deg, #2563eb, #60a5fa); }
        .metric-highlight.peg-gbp { background: linear-gradient(135deg, #7c3aed, #a78bfa); }
        .metric-highlight.peg-jpy { background: linear-gradient(135deg, #0ea5e9, #38bdf8); }
        .metric-highlight.peg-cny { background: linear-gradient(135deg, #dc2626, #ef4444); }
        .metric-highlight.peg-btc { background: linear-gradient(135deg, #f97316, #fb923c); }
        .metric-highlight.peg-gold, .metric-highlight.peg-xau { background: linear-gradient(135deg, #d97706, #f59e0b); }
        .metric-highlight.peg-silver, .metric-highlight.peg-xag { background: linear-gradient(135deg, #6b7280, #9ca3af); }
        /* New tokenized asset categories */
        .metric-highlight.peg-etf { background: linear-gradient(135deg, #0891b2, #06b6d4); }
        .metric-highlight.peg-stocks { background: linear-gradient(135deg, #6366f1, #8b5cf6); }
        .metric-highlight.peg-realestate { background: linear-gradient(135deg, #8b5e34, #d7a86e); }
        .metric-highlight.peg-treasurybills { background: linear-gradient(135deg, #0f766e, #14b8a6); }
        .metric-highlight.peg-commodities { background: linear-gradient(135deg, #b45309, #fbbf24); }
        .metric-highlight.peg-tokenizedasset { background: linear-gradient(135deg, #1f2937, #6b7280); }
        .metric-highlight.peg-other { background: linear-gradient(135deg, #64748b, #94a3b8); }


        /* Enhanced mobile responsiveness */
        @media (max-width: 1024px) {
            .home-header { padding: 1.5rem; margin-bottom: 1.5rem; }
            .summary-grid { grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); }
            .chart-grid { grid-template-columns: 1fr; }
        }
        
        @media (max-width: 860px) {
            .hide-sm { display: none; }
            .chart-wrapper { height: 280px; }
            .coins-table th, .coins-table td { padding: 0.5rem 0.25rem; }
        }
        
        @media (max-width: 640px) {
            .home-header { 
                padding: 1rem; 
                margin-bottom: 1rem; 
            }
            .home-header h1 { 
                font-size: 1.8rem; 
                margin: 0 0 0.25rem 0; 
            }
            .home-header p {
                margin: 0 0 0.5rem 0;
                font-size: 0.9rem;
            }
            .summary-grid { 
                grid-template-columns: repeat(2, 1fr); 
                gap: 0.75rem; 
            }
            .summary-card { 
                padding: 0.75rem; 
            }
            .summary-value { 
                font-size: 1.1rem; 
            }
            .header-toggle {
                display: inline-block;
            }
            .chart-container {
                padding: 1rem;
                margin: 1rem 0;
            }
            .chart-wrapper { 
                height: 220px; 
            }
            .coins-table th, .coins-table td { 
                padding: 0.4rem 0.2rem; 
                font-size: 0.9rem;
            }
            .name-cell img { 
                width: 18px; 
                height: 18px; 
            }
            .coin-rank {
                padding: 0.15rem 0.4rem;
                font-size: 0.75rem;
                min-width: 1.5rem;
            }
            .metric-highlight {
                padding: 0.15rem 0.4rem;
                font-size: 0.8rem;
            }
        }
        
        @media (max-width: 480px) {
            .hide-md { display: none; }
            .home-header { 
                padding: 0.75rem; 
                margin-bottom: 0.75rem; 
            }
            .home-header h1 { 
                font-size: 1.6rem; 
            }
            .home-header p {
                font-size: 0.85rem;
            }
            .summary-grid { 
                gap: 0.5rem; 
            }
            .summary-card { 
                padding: 0.5rem; 
            }
            .summary-value { 
                font-size: 1rem; 
            }
            .summary-label { 
                font-size: 0.8rem; 
            }
            .header-content.collapsed {
                padding-bottom: 0.5rem;
            }
            .chart-container {
                padding: 0.75rem;
                margin: 0.75rem 0;
            }
            .chart-wrapper { 
                height: 200px; 
            }
            .coins-table th, .coins-table td { 
                padding: 0.3rem 0.15rem; 
                font-size: 0.85rem;
            }
            .name-cell { 
                gap: 0.3rem; 
            }
            .name-cell img { 
                width: 16px; 
                height: 16px; 
            }
            .collapsible {
                padding: 0.6rem 1.2rem;
                font-size: 0.95rem;
            }
        }
        
        @media (max-width: 360px) {
            .hide-xs { display: none; }
            .home-header h1 { 
                font-size: 1.4rem; 
            }
            .summary-value { 
                font-size: 0.9rem; 
            }
            .summary-label { 
                font-size: 0.75rem; 
            }
            .chart-container {
                padding: 0.5rem;
                margin: 0.5rem 0;
            }
            .chart-wrapper { 
                height: 180px; 
            }
            .coins-table th, .coins-table td { 
                padding: 0.25rem 0.1rem; 
                font-size: 0.8rem;
            }
            .coin-rank {
                padding: 0.1rem 0.3rem;
                font-size: 0.7rem;
                min-width: 1.2rem;
            }
            .metric-highlight {
                padding: 0.1rem 0.3rem;
                font-size: 0.75rem;
            }
        }

        /* Sorting indicators */
        .sort-asc::after { content: ' ▲'; color: #667eea; }
        .sort-desc::after { content: ' ▼'; color: #667eea; }
    </style>
</head>
<body>
    <div id="wrapper">
        <!-- Header -->
        <%- include('partials/header') %>
        <!-- Header -->

        <main>

            <% if (data.stablecoins && data.stablecoins.length) { %>
                <!-- Home Header with Summary Stats -->
                <div class="home-header">
                    <div class="header-content" id="headerContent">
                        <h1>Stablecoins</h1>
                        <p>Real-time overview of the global stablecoin ecosystem</p>
                        
                        <div class="summary-grid">
                            <div class="summary-card">
                                <span class="summary-value"><%= data.stablecoins ? data.stablecoins.length : 0 %></span>
                                <span class="summary-label">Total Stablecoins</span>
                            </div>
                            <div class="summary-card">
                                <span class="summary-value"><%= data.metrics.totalMCap_s || 'No data' %></span>
                                <span class="summary-label">Total Market Cap</span>
                            </div>
                            <div class="summary-card">
                                <span class="summary-value"><%= data.metrics.totalVolume_s || 'No data' %></span>
                                <span class="summary-label">24h Volume</span>
                            </div>
                            <div class="summary-card">
                                <span class="summary-value"><%= (Array.isArray(data.platform_data) ? data.platform_data.length : 0) %></span>
                                <span class="summary-label">Active Blockchains</span>
                            </div>
                        </div>
                        
                        <button class="header-toggle" id="headerToggle" type="button" aria-expanded="true" aria-controls="headerContent">
                            📊 Show Stats
                        </button>
                    </div>
                </div>

                <!-- Charts: Market Cap and Volume -->
                <div class="chart-container" aria-live="polite">
                    <h2 class="section-title">Market Overview</h2>
                    <button id="chartsToggle" type="button" class="collapsible" aria-expanded="false" aria-controls="chartsContent">📊 View Market Charts</button>
                    <div class="chart-content" id="chartsContent" role="region" aria-label="Market Charts">
                        <div class="chart-grid">
                            <section>
                                <div class="chart-wrapper">
                                    <canvas id="mcapChart" aria-label="Market cap share by stablecoin" role="img"></canvas>
                                </div>
                                <p style="margin-top: 0.75rem; color: #666; font-size: 0.9rem;">Distribution of market cap across top stablecoins</p>
                                <div id="mcapEmptyState" style="display:none; color:#666;">No market cap data available to chart.</div>
                            </section>
                            <section>
                                <div class="chart-wrapper">
                                    <canvas id="volChart" aria-label="24h volume share by stablecoin" role="img"></canvas>
                                </div>
                                <p style="margin-top: 0.75rem; color: #666; font-size: 0.9rem;">Distribution of 24h volume across top stablecoins</p>
                                <div id="volEmptyState" style="display:none; color:#666;">No 24h volume data available to chart.</div>
                            </section>
                        </div>
                        <!-- Legend removed: labels are rendered directly on chart slices -->
                    </div>
                </div>
                
                <!-- Advanced Filter Controls -->
                <div class="advanced-filters">
                    <div class="filter-header">
                        <h3>Advanced Filters</h3>
                        <div class="filter-header-controls">
                            <button id="filterToggleBtn" class="filter-toggle-btn" type="button" aria-expanded="false" aria-controls="filterPanel" aria-label="Toggle filter options">
                                <span aria-hidden="true">🎛️</span>
                                <span>Show Filters</span>
                                <span class="filter-count-badge" id="filterCount" style="display: none;"></span>
                            </button>
                            <button id="clearFiltersBtn" class="clear-filters-btn" type="button">
                                Clear All
                            </button>
                        </div>
                    </div>
                    
                    <div class="filter-panel" id="filterPanel" style="display: none;">
                        <!-- Asset Type Filters -->
                        <div class="filter-section">
                            <h4>Asset Types</h4>
                            <div class="filter-group checkbox-group">
                                <label class="filter-checkbox">
                                    <input type="checkbox" id="filter_fiat" value="fiat" checked aria-describedby="fiat-description">
                                    <span class="checkmark" aria-hidden="true"></span>
                                    <span id="fiat-description">Fiat-backed (USD, EUR, GBP, etc.)</span>
                                </label>
                                <label class="filter-checkbox">
                                    <input type="checkbox" id="filter_commodities" value="commodities" checked aria-describedby="commodities-description">
                                    <span class="checkmark" aria-hidden="true"></span>
                                    <span id="commodities-description">Commodities (Gold, Silver)</span>
                                </label>
                                <label class="filter-checkbox">
                                    <input type="checkbox" id="filter_crypto" value="crypto" checked aria-describedby="crypto-description">
                                    <span class="checkmark" aria-hidden="true"></span>
                                    <span id="crypto-description">Crypto-backed (BTC, ETH)</span>
                                </label>
                                <label class="filter-checkbox">
                                    <input type="checkbox" id="filter_tokenized" value="tokenized" checked aria-describedby="tokenized-description">
                                    <span class="checkmark" aria-hidden="true"></span>
                                    <span id="tokenized-description">Tokenized Assets (ETF, Stocks, Real Estate)</span>
                                </label>
                                <label class="filter-checkbox">
                                    <input type="checkbox" id="filter_other" value="other" checked aria-describedby="other-description">
                                    <span class="checkmark" aria-hidden="true"></span>
                                    <span id="other-description">Other/Unknown</span>
                                </label>
                            </div>
                        </div>

                        <!-- Price Range Filter -->
                        <div class="filter-section">
                            <h4>Price Range</h4>
                            <div class="filter-group range-group">
                                <div class="range-inputs">
                                    <label for="priceMin" class="sr-only">Minimum price filter</label>
                                    <input type="number" id="priceMin" placeholder="Min" step="0.01" min="0" max="2" value="0.90" aria-label="Minimum price in dollars">
                                    <span class="range-separator">to</span>
                                    <label for="priceMax" class="sr-only">Maximum price filter</label>
                                    <input type="number" id="priceMax" placeholder="Max" step="0.01" min="0" max="2" value="1.10" aria-label="Maximum price in dollars">
                                </div>
                                <div class="range-slider-container">
                                    <label for="priceRangeMin" class="sr-only">Price range minimum slider</label>
                                    <input type="range" id="priceRangeMin" min="0.50" max="2.00" step="0.01" value="0.90" class="range-slider" aria-label="Minimum price range slider">
                                    <label for="priceRangeMax" class="sr-only">Price range maximum slider</label>
                                    <input type="range" id="priceRangeMax" min="0.50" max="2.00" step="0.01" value="1.10" class="range-slider" aria-label="Maximum price range slider">
                                </div>
                            </div>
                        </div>

                        <!-- Market Cap Range Filter -->
                        <div class="filter-section">
                            <h4>Market Cap Range</h4>
                            <div class="filter-group range-group">
                                <div class="range-inputs">
                                    <label for="mcapMin" class="sr-only">Minimum market cap filter</label>
                                    <input type="number" id="mcapMin" placeholder="Min (millions)" step="1" min="0" value="1" aria-label="Minimum market cap in millions">
                                    <span class="range-separator">to</span>
                                    <label for="mcapMax" class="sr-only">Maximum market cap filter</label>
                                    <input type="number" id="mcapMax" placeholder="Max (millions)" step="1" min="0" value="100000" aria-label="Maximum market cap in millions">
                                </div>
                                <label class="filter-checkbox">
                                    <input type="checkbox" id="mcapLogScale" checked aria-describedby="mcap-log-description">
                                    <span class="checkmark" aria-hidden="true"></span>
                                    <span id="mcap-log-description">Logarithmic scale</span>
                                </label>
                            </div>
                        </div>

                        <!-- Volume Range Filter -->
                        <div class="filter-section">
                            <h4>24h Volume Range</h4>
                            <div class="filter-group range-group">
                                <div class="range-inputs">
                                    <label for="volumeMin" class="sr-only">Minimum volume filter</label>
                                    <input type="number" id="volumeMin" placeholder="Min (thousands)" step="1" min="0" value="100" aria-label="Minimum 24h volume in thousands">
                                    <span class="range-separator">to</span>
                                    <label for="volumeMax" class="sr-only">Maximum volume filter</label>
                                    <input type="number" id="volumeMax" placeholder="Max (thousands)" step="1" min="0" value="10000000" aria-label="Maximum 24h volume in thousands">
                                </div>
                                <label class="filter-checkbox">
                                    <input type="checkbox" id="volumeLogScale" checked aria-describedby="volume-log-description">
                                    <span class="checkmark" aria-hidden="true"></span>
                                    <span id="volume-log-description">Logarithmic scale</span>
                                </label>
                            </div>
                        </div>

                        <!-- Platform/Chain Filters -->
                        <div class="filter-section">
                            <h4>Blockchain Platforms</h4>
                            <div class="filter-group">
                                <div class="platform-filter-controls">
                                    <label for="platformSelect" class="sr-only">Select blockchain platforms</label>
                                    <select id="platformSelect" multiple class="platform-multiselect" aria-label="Select blockchain platforms to filter by">
                                        <option value="">All platforms</option>
                                    </select>
                                </div>
                                <div class="platform-options">
                                    <label class="filter-checkbox">
                                        <input type="checkbox" id="filter_crosschain" aria-describedby="crosschain-description">
                                        <span class="checkmark" aria-hidden="true"></span>
                                        <span id="crosschain-description">Cross-chain only (2+ blockchains)</span>
                                    </label>
                                    <div class="blockchain-count-filter">
                                        <label for="blockchainCount">Min blockchains:</label>
                                        <input type="number" id="blockchainCount" min="1" max="50" value="1" class="count-input" aria-label="Minimum number of blockchains required">
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Data Quality Filters -->
                        <div class="filter-section">
                            <h4>Data Quality</h4>
                            <div class="filter-group checkbox-group">
                                <label class="filter-checkbox">
                                    <input type="checkbox" id="filter_hideConflicts" aria-describedby="hide-conflicts-description">
                                    <span class="checkmark" aria-hidden="true"></span>
                                    <span id="hide-conflicts-description">Hide coins with data conflicts</span>
                                </label>
                                <label class="filter-checkbox">
                                    <input type="checkbox" id="filter_completeDataOnly" aria-describedby="complete-data-description">
                                    <span class="checkmark" aria-hidden="true"></span>
                                    <span id="complete-data-description">Complete data only</span>
                                </label>
                            </div>
                        </div>

                        <!-- Search Filter -->
                        <div class="filter-section">
                            <h4>Search</h4>
                            <div class="filter-group">
                                <label for="searchFilter" class="sr-only">Search stablecoins</label>
                                <input type="text" id="searchFilter" placeholder="Search by name or symbol..." class="search-input" aria-label="Search stablecoins by name or symbol">
                            </div>
                        </div>
                    </div>

                    <!-- Active Filters Display -->
                    <div class="active-filters" id="activeFilters" style="display: none;">
                        <div class="active-filters-header">
                            <span class="active-filters-label">Active filters:</span>
                            <span class="results-count" id="resultsCount">Showing all results</span>
                        </div>
                        <div class="filter-badges" id="filterBadges"></div>
                    </div>
                </div>

                <div class="content-section">
                    <h2 class="section-title">Top Stablecoins</h2>
                    <div class="table-container">
                        <table class="coins-table" id="coinsTable">
                        <thead>
                            <tr>
                                <th class="rank" onclick="sortCoinsTable(0)">#</th>
                                <th onclick="sortCoinsTable(1)">Name</th>
                                <th class="hide-sm" onclick="sortCoinsTable(2)">Symbol</th>
                                <th onclick="sortCoinsTable(3)">Price</th>
                                <th class="hide-md" onclick="sortCoinsTable(4)">Pegged Asset</th>
                                <th onclick="sortCoinsTable(5)">Market Cap</th>
                                <th class="hide-sm" onclick="sortCoinsTable(6)">Dominance</th>
                                <th class="hide-sm" onclick="sortCoinsTable(7)">Volume (24h)</th>
                                <th class="hide-sm" onclick="sortCoinsTable(8)">Blockchains</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% let i = 0; %>
                            <% data.stablecoins.forEach((coin) => { %>
                                <% if (!coin.name || !coin.symbol) return; %>
                                <% i++; %>
                                <tr>
                                    <td class="rank"><span class="coin-rank"><%= i %></span></td>
                                    <td>
                                        <div class="name-cell">
                                            <img src="<%= h.getImage(coin) %>" alt="<%= coin.symbol %>" />
                                            <a href="/coins/<%= coin.uri %>" class="coin-name"><%= coin.name %></a>
                                        </div>
                                    </td>
                                    <td class="hide-sm symbol">
                                        <% if (coin.conflicts) { %>
                                            <span title="Conflicts detected" style="color:#d9534f;font-weight:bold;margin-right:6px;">⚠</span>
                                        <% } %>
                                        <%= coin.symbol %>
                                    </td>
                                    <td data-sort="<%= h.safeGet(coin, 'main.price', 0) %>"><%= h.getFormattedPrice(coin, 'main', formatter) %></td>
                                    <td class="hide-md">
                                        <% if (coin.pegged_asset) { 
                                            const pegKey = String(coin.pegged_asset).toLowerCase().replace(/[^a-z0-9]+/g, '');
                                            const known = ['usd','eur','gbp','jpy','cny','btc','gold','xau','silver','xag','etf','stocks','realestate','treasurybills','commodities','tokenizedasset'];
                                            const cls = known.includes(pegKey) ? pegKey : 'other';
                                        %>
                                            <span class="metric-highlight peg-<%= cls %>"><%= coin.pegged_asset %></span>
                                        <% } else { %>
                                            -
                                        <% } %>
                                    </td>
                                    <td data-sort="<%= h.safeGet(coin, 'main.circulating_mcap', 0) %>"><%= h.getMarketCap(coin, 'main') %></td>
                                    <td class="hide-sm" data-sort="<%= (h.calculateDominance(h.safeGet(coin, 'main.circulating_mcap', 0), h.safeGet(data.metrics, 'totalMCap', 0)) || 0) %>"><span class="metric-highlight"><%= h.getDominanceDisplay(coin, data.metrics, formatter) %></span></td>
                                    <td class="hide-sm" data-sort="<%= h.safeGet(coin, 'main.volume_24h', 0) %>"><%= h.getVolume(coin, 'main') %></td>
                                    <td class="hide-sm platforms" data-sort="<%= Array.isArray(coin.platforms) ? coin.platforms.length : 0 %>"><%= h.getPlatformDisplay(coin.platforms) %></td>
                                </tr>
                            <% }); %>
                        </tbody>
                        </table>
                    </div>
                </div>
            <% } else { %>
                <div class="content-section">
                    <p>No stablecoin data available.</p>
                </div>
            <% } %>
        </main>

        <!-- Footer -->
        <%- include('partials/footer') %>
        <!-- Footer -->
    </div>
    <script>
        // Table sorting for homepage stablecoins
        function sortCoinsTable(columnIndex) {
            const table = document.getElementById('coinsTable');
            if (!table) return;
            const tbody = table.getElementsByTagName('tbody')[0];
            const rows = Array.from(tbody.getElementsByTagName('tr'));

            const headers = table.getElementsByTagName('th');
            const currentHeader = headers[columnIndex];

            // Determine sort direction (toggle)
            let isAscending;
            if (currentHeader.classList.contains('sort-asc')) {
                isAscending = false;
            } else if (currentHeader.classList.contains('sort-desc')) {
                isAscending = true;
            } else {
                const numericCols = new Set([0,3,5,6,7,8]);
                isAscending = !numericCols.has(columnIndex);
            }

            // Sort rows
            rows.sort((a, b) => {
                const aCell = a.getElementsByTagName('td')[columnIndex];
                const bCell = b.getElementsByTagName('td')[columnIndex];

                let aValue = aCell ? aCell.textContent.trim() : '';
                let bValue = bCell ? bCell.textContent.trim() : '';

                // Numeric columns use data-sort where available
                if ([0,3,5,6,7,8].includes(columnIndex)) {
                    const aSort = aCell?.getAttribute('data-sort');
                    const bSort = bCell?.getAttribute('data-sort');
                    const aNum = aSort != null ? parseFloat(aSort) : (parseFloat(aValue.replace(/[^0-9.-]/g, '')) || 0);
                    const bNum = bSort != null ? parseFloat(bSort) : (parseFloat(bValue.replace(/[^0-9.-]/g, '')) || 0);
                    return isAscending ? aNum - bNum : bNum - aNum;
                }

                // Text columns
                return isAscending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
            });

            // Reset header classes and set current
            for (let header of headers) {
                header.classList.remove('sort-asc', 'sort-desc');
            }
            currentHeader.classList.add(isAscending ? 'sort-asc' : 'sort-desc');

            // Apply new order
            rows.forEach(row => tbody.appendChild(row));
        }

        // Apply sorting based on URL query parameters
        (function() {
            try {
                const params = new URLSearchParams(window.location.search);
                const sortKey = (params.get('sort') || '').toLowerCase();
                const dir = (params.get('dir') || '').toLowerCase();
                const map = { mcap: 5, marketcap: 5, volume: 7, vol: 7, price: 3, blockchains: 8, chains: 8 };
                if (sortKey in map) {
                    const col = map[sortKey];
                    sortCoinsTable(col);
                    if (dir === 'asc' || dir === 'ascending') {
                        sortCoinsTable(col);
                    }
                }
            } catch (_) {}
        })();
    </script>

    <!-- Chart scripts -->
    <script type="text/javascript">
        (function(){
            <% if (data.stablecoins && data.stablecoins.length) { %>
            // Ensure no per-chart legends are rendered by default (Chart.js v3+)
            if (window.Chart && Chart.defaults && Chart.defaults.plugins && Chart.defaults.plugins.legend) {
                Chart.defaults.plugins.legend.display = false;
            }
            // Extract numeric arrays for market cap and volume
            const coinsRaw = [
                <% data.stablecoins.forEach((coin) => { %>
                    {
                        name: "<%= (coin.name || '').replace(/"/g, '\\"') %>",
                        symbol: "<%= (coin.symbol || '').replace(/"/g, '\\"') %>",
                        mcap: <%= typeof coin.main?.circulating_mcap === 'number' ? coin.main.circulating_mcap : 'null' %>,
                        vol: <%= typeof coin.main?.volume_24h === 'number' ? coin.main.volume_24h : 'null' %>
                    },
                <% }); %>
            ];

            function buildTopSlices(items, valueKey, topN) {
                const valid = items.filter(x => typeof x[valueKey] === 'number' && isFinite(x[valueKey]) && x[valueKey] > 0);
                const total = valid.reduce((s, x) => s + x[valueKey], 0);
                if (!total || total <= 0) return { labels: [], data: [], total: 0 };
                valid.sort((a,b) => b[valueKey] - a[valueKey]);
                const top = valid.slice(0, Math.min(valid.length, topN));
                const othersSum = valid.slice(top.length).reduce((s, x) => s + x[valueKey], 0);
                const labels = top.map(x => x.symbol || x.name);
                const data = top.map(x => (x[valueKey] / total) * 100);
                if (othersSum > 0) {
                    labels.push('Others');
                    data.push((othersSum / total) * 100);
                }
                return { labels, data, total };
            }

            // Shared color palette and mapping to ensure consistent colors across charts
            const palette = ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe', '#00f2fe', '#43e97b', '#38f9d7', '#ffecd2', '#fcb69f', '#a8edea', '#fed6e3'];

            function assignColors(mcapLabels, volLabels) {
                const order = [];
                (mcapLabels || []).forEach(l => { if (order.indexOf(l) === -1) order.push(l); });
                (volLabels || []).forEach(l => { if (order.indexOf(l) === -1) order.push(l); });
                const map = new Map();
                order.forEach((label, idx) => map.set(label, palette[idx % palette.length]));
                return { order, map };
            }

            // Plugin: draw labels on arc segments
            const segmentLabelPlugin = {
                id: 'segmentLabel',
                afterDatasetsDraw(chart, args, opts) {
                    const { ctx } = chart;
                    const threshold = (opts && typeof opts.minPercentage === 'number') ? opts.minPercentage : 5;
                    const font = (opts && opts.font) || '12px sans-serif';
                    const color = (opts && opts.color) || '#333';
                    const formatter = (opts && opts.formatter) || ((lbl, v) => `${lbl} ${v.toFixed(1)}%`);
                    chart.data.datasets.forEach((dataset, i) => {
                        const meta = chart.getDatasetMeta(i);
                        meta.data.forEach((arc, idx) => {
                            const val = dataset.data[idx];
                            if (typeof val !== 'number' || !isFinite(val) || val < threshold) return;
                            const pos = arc.tooltipPosition();
                            const label = chart.data.labels[idx] || '';
                            const text = formatter(label, val, idx);
                            ctx.save();
                            ctx.font = font;
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';
                            ctx.strokeStyle = 'rgba(255,255,255,0.95)';
                            ctx.lineWidth = 3;
                            ctx.strokeText(text, pos.x, pos.y);
                            ctx.fillStyle = color;
                            ctx.fillText(text, pos.x, pos.y);
                            ctx.restore();
                        });
                    });
                }
            };
            if (window.Chart && Chart.register) { Chart.register(segmentLabelPlugin); }

            function makeDoughnutChart(canvasId, label, slices, colorMap) {
                const el = document.getElementById(canvasId);
                if (!el) return null;
                if (!slices || !slices.data || slices.data.length === 0) return null;
                return new Chart(el.getContext('2d'), {
                    type: 'doughnut',
                    data: {
                        labels: slices.labels,
                        datasets: [{
                            label: label,
                            data: slices.data.map(v => Number(v.toFixed(2))),
                            backgroundColor: slices.labels.map(l => colorMap.get(l) || palette[0]),
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const lbl = context.label || '';
                                        const v = context.parsed;
                                        return `${lbl}: ${v.toFixed(2)}%`;
                                    }
                                }
                            },
                            segmentLabel: { minPercentage: 5, font: '12px sans-serif', color: '#333' }
                        }
                    }
                });
            }

            // Prepare initial slices (top 8 + Others)
            let mcapSlices = buildTopSlices(coinsRaw, 'mcap', 8);
            let volSlices = buildTopSlices(coinsRaw, 'vol', 8);
            // Consistent colors across both charts and single legend
            let { order: legendOrder, map: colorMap } = assignColors(mcapSlices.labels, volSlices.labels);
            
            // Store chart instances for updates
            let mcapChart = null;
            let volChart = null;
            
            // Function to build/rebuild charts
            function buildCharts(filteredData = null) {
                // Use filtered data if provided, otherwise use original data
                const dataToUse = filteredData || coinsRaw;
                
                // Recalculate slices with current data
                mcapSlices = buildTopSlices(dataToUse, 'mcap', 8);
                volSlices = buildTopSlices(dataToUse, 'vol', 8);
                
                // Recalculate colors
                const colors = assignColors(mcapSlices.labels, volSlices.labels);
                legendOrder = colors.order;
                colorMap = colors.map;
                
                // Destroy existing charts if they exist
                if (mcapChart) {
                    mcapChart.destroy();
                    mcapChart = null;
                }
                if (volChart) {
                    volChart.destroy();
                    volChart = null;
                }
                
                // Create new charts
                mcapChart = makeDoughnutChart('mcapChart', 'Market Cap Share (%)', mcapSlices, colorMap);
                volChart = makeDoughnutChart('volChart', 'Volume Share (%)', volSlices, colorMap);
                
                // Handle empty state displays
                if (!mcapChart) { 
                    const e = document.getElementById('mcapEmptyState'); 
                    if (e) e.style.display = 'block'; 
                } else {
                    const e = document.getElementById('mcapEmptyState'); 
                    if (e) e.style.display = 'none';
                }
                
                if (!volChart) { 
                    const e = document.getElementById('volEmptyState'); 
                    if (e) e.style.display = 'block'; 
                } else {
                    const e = document.getElementById('volEmptyState'); 
                    if (e) e.style.display = 'none';
                }
                
                // Build shared legend
                const legend = document.getElementById('sharedLegend');
                if (legend) {
                    if (legendOrder.length) {
                        legend.innerHTML = legendOrder.map(label => {
                            const color = colorMap.get(label) || '#667eea';
                            return `<span class="legend-item"><span class="legend-swatch" style="background:${color}"></span>${label}</span>`;
                        }).join('');
                    } else {
                        legend.innerHTML = '<span style="color:#666;">No data available.</span>';
                    }
                }
            }
            
            // Listen for filter updates
            window.addEventListener('stablecoinDataFiltered', function(event) {
                const filteredStablecoins = event.detail.filteredData;
                
                // Convert filtered data to chart format
                const filteredChartData = filteredStablecoins.map(coin => ({
                    name: coin.name,
                    symbol: coin.symbol,
                    mcap: coin.circulating_mcap,
                    vol: coin.volume_24h
                }));
                
                // Only rebuild charts if they are currently visible
                const chartsContent = document.getElementById('chartsContent');
                if (chartsContent && chartsContent.style.display === 'block') {
                    buildCharts(filteredChartData);
                }
            });

            // Toggle behavior for collapsibles
            function setupCollapsible(btn, contentId, buildAll) {
                const content = document.getElementById(contentId);
                let initialized = false;
                btn.addEventListener('click', function(){
                    const expanded = this.getAttribute('aria-expanded') === 'true';
                    this.setAttribute('aria-expanded', (!expanded).toString());
                    if (content.style.display === 'block') {
                        content.style.display = 'none';
                        this.classList.remove('active');
                    } else {
                        content.style.display = 'block';
                        this.classList.add('active');
                        // Lazy init charts when first opened
                        if (!initialized) {
                            buildCharts();
                            initialized = true;
                        }
                    }
                });
            }

            function initChartsToggle() {
                const chartsBtn = document.getElementById('chartsToggle') || document.querySelector('button[aria-controls="chartsContent"]');
                if (chartsBtn) setupCollapsible(chartsBtn, 'chartsContent');
            }
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initChartsToggle);
            } else {
                initChartsToggle();
            }

            <% } %>
        })();
    </script>

    <!-- Embedded Stablecoin Data for Client-Side Filtering -->
    <script>
        // Global stablecoin data for filtering
        window.StablecoinData = {
            stablecoins: [
                <% if (data.stablecoins && data.stablecoins.length) { %>
                    <% let validIndex = 0; %>
                    <% data.stablecoins.forEach((coin, index) => { %>
                        <% if (!coin.name || !coin.symbol) return; %>
                        <% validIndex++; %>
                        {
                            name: "<%= (coin.name || '').replace(/"/g, '\\"') %>",
                            symbol: "<%= (coin.symbol || '').replace(/"/g, '\\"') %>",
                            uri: "<%= (coin.uri || '').replace(/"/g, '\\"') %>",
                            img_url: "<%= h.getImage(coin).replace(/"/g, '\\"') %>",
                            pegged_asset: "<%= (coin.pegged_asset || '').replace(/"/g, '\\"') %>",
                            assetCategory: "<%= (coin.assetCategory || '').replace(/"/g, '\\"') %>",
                            price: <%= h.safeGet(coin, 'main.price', 0) %>,
                            circulating_mcap: <%= h.safeGet(coin, 'main.circulating_mcap', 0) %>,
                            volume_24h: <%= h.safeGet(coin, 'main.volume_24h', 0) %>,
                            platforms: [
                                <% if (Array.isArray(coin.platforms)) { %>
                                    <% coin.platforms.forEach((platform, pIndex) => { %>
                                        {
                                            name: "<%= (platform.name || '').replace(/"/g, '\\"') %>",
                                            circulating_supply: <%= platform.circulating_supply || 0 %>,
                                            total_supply: <%= platform.total_supply || 0 %>
                                        }<%= pIndex < coin.platforms.length - 1 ? ',' : '' %>
                                    <% }); %>
                                <% } %>
                            ],
                            dominantChain: "<%= (coin.dominantChain || '').replace(/"/g, '\\"') %>",
                            totalCrossChainSupply: <%= coin.totalCrossChainSupply || 0 %>,
                            chainSupplyBreakdown: <%= JSON.stringify(coin.chainSupplyBreakdown || {}) %>,
                            conflicts: <%= coin.conflicts ? 'true' : 'false' %>,
                            rank: <%= validIndex %>,
                            dominance: <%= h.calculateDominance(h.safeGet(coin, 'main.circulating_mcap', 0), h.safeGet(data.metrics, 'totalMCap', 0)) || 0 %>,
                            // Formatted strings for display
                            formatted: {
                                price: "<%= h.getFormattedPrice(coin, 'main', formatter).replace(/"/g, '\\"') %>",
                                mcap: "<%= h.getMarketCap(coin, 'main').replace(/"/g, '\\"') %>",
                                volume: "<%= h.getVolume(coin, 'main').replace(/"/g, '\\"') %>",
                                dominance: "<%= h.getDominanceDisplay(coin, data.metrics, formatter).replace(/"/g, '\\"') %>",
                                platforms: "<%= h.getPlatformDisplay(coin.platforms).replace(/"/g, '\\"') %>"
                            }
                        }<%= validIndex < data.stablecoins.filter(c => c.name && c.symbol).length ? ',' : '' %>
                    <% }); %>
                <% } %>
            ],
            metrics: {
                totalMCap: <%= data.metrics.totalMCap || 0 %>,
                totalVolume: <%= data.metrics.totalVolume || 0 %>,
                totalMCap_s: "<%= (data.metrics.totalMCap_s || 'No data').replace(/"/g, '\\"') %>",
                totalVolume_s: "<%= (data.metrics.totalVolume_s || 'No data').replace(/"/g, '\\"') %>",
                lastUpdated: "<%= data.metrics.lastUpdated || '' %>"
            },
            platforms: [
                <% if (Array.isArray(data.platform_data)) { %>
                    <% data.platform_data.forEach((platform, index) => { %>
                        "<%= (platform.name || '').replace(/"/g, '\\"') %>"<%= index < data.platform_data.length - 1 ? ',' : '' %>
                    <% }); %>
                <% } %>
            ]
        };

        // Create master copy for filtering operations
        window.StablecoinData.master = JSON.parse(JSON.stringify(window.StablecoinData.stablecoins));
        
        // Extract unique values for filter options
        window.StablecoinData.filterOptions = {
            peggedAssets: [...new Set(window.StablecoinData.stablecoins.map(coin => coin.pegged_asset).filter(Boolean))],
            assetCategories: [...new Set(window.StablecoinData.stablecoins.map(coin => coin.assetCategory).filter(Boolean))],
            allPlatforms: [...new Set(window.StablecoinData.stablecoins.flatMap(coin => coin.platforms.map(p => p.name)).filter(Boolean))],
            dominantChains: [...new Set(window.StablecoinData.stablecoins.map(coin => coin.dominantChain).filter(Boolean))]
        };
    </script>

    <script>
        // Legacy fiat-only filter functionality removed
        // Now handled by the comprehensive filter system
        
        // Header toggle functionality for mobile
        (function() {
            const headerToggle = document.getElementById('headerToggle');
            const headerContent = document.getElementById('headerContent');
            
            if (headerToggle && headerContent) {
                headerToggle.addEventListener('click', function() {
                    const isCollapsed = headerContent.classList.contains('collapsed');
                    
                    if (isCollapsed) {
                        headerContent.classList.remove('collapsed');
                        headerToggle.textContent = '📈 Hide Stats';
                        headerToggle.setAttribute('aria-expanded', 'true');
                    } else {
                        headerContent.classList.add('collapsed');
                        headerToggle.textContent = '📊 Show Stats';
                        headerToggle.setAttribute('aria-expanded', 'false');
                    }
                });
                
                // Initialize collapsed state on small screens
                function checkScreenSize() {
                    if (window.innerWidth <= 640) {
                        headerContent.classList.add('collapsed');
                        headerToggle.textContent = '📊 Show Stats';
                        headerToggle.setAttribute('aria-expanded', 'false');
                    } else {
                        headerContent.classList.remove('collapsed');
                        headerToggle.textContent = '📈 Hide Stats';
                        headerToggle.setAttribute('aria-expanded', 'true');
                    }
                }
                
                checkScreenSize();
                window.addEventListener('resize', checkScreenSize);
            }
        })();
    </script>
</body>
</html>
