# StablecoinWatch Environment Configuration (Active Settings Only)

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# Server port (default: 3000)
PORT=3000
# Environment: development or production
NODE_ENV=development

# =============================================================================
# API KEYS (Required)
# =============================================================================
# CoinMarketCap API Key (required)
# Get from: https://coinmarketcap.com/api/
CMC_API_KEY=your_cmc_api_key_here

# Messari API Key (required)
# Get from: https://messari.io/api
MESSARI_API_KEY=your_messari_api_key_here

# =============================================================================
# DATA SOURCES (Active Sources)
# =============================================================================
# Comma-separated list of enabled data sources
# Available: cmc, messari, coingecko, defillama
# Default: cmc,messari (if not specified)
ENABLED_SOURCES=cmc,messari,defillama,coingecko

# Optional: Override per-source priority used when merging fields
# Provide a JSON object where higher numbers mean higher priority.
# If omitted for a source, its built-in capability priority is used.
# Note: DeFiLlama ALWAYS takes priority for cross-chain supply data regardless of this setting.
#
# Default Built-in Priorities (when SOURCE_PRIORITY is not set):
# - CoinMarketCap: 10 (market data priority)
# - Messari: 9 (supply data priority) 
# - CoinGecko: 6 (metadata and logo fallback)
# - DeFiLlama: 8 (cross-chain analytics, always overrides for platform data)
#
# Example: prefer Messari for supply, CMC for market, then CG, then DeFiLlama
# SOURCE_PRIORITY={"cmc":10,"messari":9,"coingecko":6,"defillama":4}
#
# Example: prefer CoinGecko for metadata (description, logo, website)
# SOURCE_PRIORITY={"coingecko":11,"cmc":10,"messari":9,"defillama":4}

# =============================================================================
# HEALTH MONITORING (Active)
# =============================================================================
# Enable health monitoring (default: true)
HEALTH_MONITORING=true
# Health check interval (ms, default: 60000)
HEALTH_CHECK_INTERVAL_MS=60000
# Error rate threshold for degraded mode (0-1, default: 0.2)
ERROR_RATE_THRESHOLD=0.2
# Response time threshold for alerts (ms, default: 10000)
RESPONSE_TIME_THRESHOLD_MS=10000
# Degraded mode activation threshold (0-1, default: 0.7)
DEGRADED_MODE_THRESHOLD=0.7
# Minimum healthy sources to avoid degraded mode (default: 1)
MIN_HEALTHY_SOURCES=1
# Health data retention (days, default: 7)
HEALTH_RETENTION_DAYS=7

# =============================================================================
# CIRCUIT BREAKER (Active)
# =============================================================================
# Enable circuit breaker pattern (default: true)
CIRCUIT_BREAKER=true
# Failures before opening circuit (default: 5)
CIRCUIT_BREAKER_FAILURES=5
# Circuit breaker timeout (ms, default: 60000)
CIRCUIT_BREAKER_TIMEOUT_MS=60000
# Reset timeout for half-open state (ms, default: 300000)
CIRCUIT_BREAKER_RESET_MS=300000

# =============================================================================
# DEVELOPMENT MOCK DATA (Optional)
# =============================================================================
# Enable mock data mode for development/testing (bypasses live API calls)
# Set to 'true' to use local JSON files instead of live API requests

# CoinMarketCap mock data
CMC_MOCK_DATA=false
CMC_MOCK_FILE=cmc_raw_output.json

# Messari mock data
MESSARI_MOCK_DATA=false
MESSARI_MOCK_FILE=messari_raw_output.json

# DeFiLlama mock data
DEFILLAMA_MOCK_DATA=false
DEFILLAMA_MOCK_FILE=defillama_raw_output.json

# DeFiLlama filtering (peg types)
# By default, all peg types are allowed. You can exclude specific peg types here (CSV).
# Example excludes BTC-pegged assets while allowing others (e.g., XAU):
# DEFILLAMA_EXCLUDED_PEG_TYPES=peggedBTC
DEFILLAMA_EXCLUDED_PEG_TYPES=peggedBTC

# CoinGecko mock data (for future use)
COINGECKO_MOCK_DATA=false
COINGECKO_MOCK_FILE=coingecko_raw_output.json

# =============================================================================
# ASSET CLASSIFICATION (Active)
# =============================================================================
# Enable asset classification system (default: true)
ASSET_CLASSIFICATION_ENABLED=true

# Custom stablecoin tags (comma-separated, optional)
# Extends default 'stablecoin' tag with additional tags
# Example: CUSTOM_STABLECOIN_TAGS=stable,fiat-backed,dollar-pegged
#CUSTOM_STABLECOIN_TAGS=

# Custom tokenized asset tags (comma-separated, optional)  
# Extends default 'tokenized-assets' tag with additional tags
# Example: CUSTOM_TOKENIZED_TAGS=rwa,real-world-assets,tokenized
#CUSTOM_TOKENIZED_TAGS=

# =============================================================================
# TOKENIZED ASSETS CONFIGURATION
# =============================================================================
# Control inclusion of tokenized assets (RWAs) in data processing
# Tokenized assets include gold tokens (PAXG), tokenized stocks, ETFs, etc.

# CoinMarketCap: Include tokenized assets alongside stablecoins (default: false)
# Set to 'true' to include tokenized assets in CMC data processing
# Set to 'false' or omit to maintain traditional stablecoin-only behavior (backward compatible)
# 
# Impact when enabled:
# - Tokenized assets will be fetched and classified separately
# - UI can display tokenized assets in separate sections
# - Market totals will be segmented (stablecoins vs tokenized assets)
# - Existing stablecoin metrics remain unchanged
#
# Backward compatibility: 
# - Default 'false' preserves existing behavior
# - Existing deployments continue working without changes
# - Opt-in model for new tokenized asset features
CMC_INCLUDE_TOKENIZED_ASSETS=false

# Future expansion: Other sources can be configured similarly
# MESSARI_INCLUDE_TOKENIZED_ASSETS=false
# COINGECKO_INCLUDE_TOKENIZED_ASSETS=false
# DEFILLAMA_INCLUDE_TOKENIZED_ASSETS=false

# =============================================================================
# NOTES
# =============================================================================
# - Data refresh interval is currently fixed at 15 minutes in app/app.js.
# - Mock data files can be updated using: node scripts/update-mock-data.js
# - VS Code tasks are available for updating mock data (Ctrl+Shift+P > Tasks: Run Task)
# - Only the variables listed above are used by the application.
